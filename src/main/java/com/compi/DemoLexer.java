/* The following code was generated by JFlex 1.4.3 on 9/9/24, 22:49 */

// ** Archivo de especificación léxica **
package com.compi; // Declara el paquete donde quiero generar mi clase


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/9/24, 22:49 from the specification file
 * <tt>C:/Users/DEVAN/Documents/2024/Segundo semestre/GitHub/AnalizadorLexico-Scanner/src/main/java/com/compi/simple.flex</tt>
 */
public class DemoLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\4\2\0\1\3\22\0\1\3\1\51\1\64\1\17"+
    "\1\0\1\62\1\61\1\65\1\10\1\16\1\7\1\15\1\56\1\52"+
    "\1\66\1\5\1\70\7\1\2\1\1\0\1\55\1\60\1\50\1\57"+
    "\2\0\4\72\1\67\1\72\21\2\1\71\2\2\1\11\1\6\1\13"+
    "\1\12\2\0\1\26\1\36\1\27\1\35\1\33\1\23\1\40\1\30"+
    "\1\20\1\2\1\41\1\24\1\42\1\21\1\25\1\46\1\2\1\31"+
    "\1\37\1\22\1\34\1\47\1\32\1\43\1\45\1\44\1\53\1\14"+
    "\1\54\1\63\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\17\3\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\2\1\1\2\1\0\1\32\1\0"+
    "\1\33\1\34\1\35\1\36\1\37\1\3\1\40\16\3"+
    "\1\41\10\3\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\2\0\1\54\3\0\1\2"+
    "\1\55\1\56\2\3\1\57\31\3\1\60\1\61\2\0"+
    "\2\3\1\62\1\63\2\3\1\64\1\65\3\3\1\66"+
    "\1\67\14\3\1\70\1\71\1\3\1\72\2\0\1\3"+
    "\1\73\1\3\1\74\2\3\1\75\1\3\1\76\3\3"+
    "\1\77\4\3\1\100\2\3\1\0\2\3\1\101\1\3"+
    "\1\102\1\3\1\103\1\3\1\104\1\105\1\106\1\107"+
    "\1\110\1\3\1\0\1\111\3\3\1\112\1\3\1\0"+
    "\1\113\1\114\1\115\1\116\20\0\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\73\0\u0127\0\u0162"+
    "\0\73\0\73\0\u019d\0\u01d8\0\73\0\u0213\0\u024e\0\u0289"+
    "\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461"+
    "\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639"+
    "\0\73\0\73\0\73\0\73\0\u0674\0\u06af\0\u06ea\0\u0725"+
    "\0\73\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\73"+
    "\0\73\0\73\0\73\0\73\0\u08c2\0\261\0\u08fd\0\u0938"+
    "\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10"+
    "\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8"+
    "\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\73\0\73\0\73"+
    "\0\73\0\73\0\73\0\73\0\73\0\73\0\73\0\u0760"+
    "\0\u0e4a\0\73\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\261"+
    "\0\u0fac\0\u0fe7\0\261\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e"+
    "\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6"+
    "\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be"+
    "\0\u14f9\0\u1534\0\u156f\0\u15aa\0\73\0\u0efb\0\u15e5\0\u1620"+
    "\0\u165b\0\u1696\0\261\0\261\0\u16d1\0\u170c\0\261\0\261"+
    "\0\u1747\0\u1782\0\u17bd\0\261\0\261\0\u17f8\0\u1833\0\u186e"+
    "\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46"+
    "\0\u1a81\0\261\0\261\0\u1abc\0\u1af7\0\u1af7\0\u1b32\0\u1b6d"+
    "\0\261\0\u1ba8\0\261\0\u1be3\0\u1c1e\0\261\0\u1c59\0\261"+
    "\0\u1c94\0\u1ccf\0\u1d0a\0\261\0\u1d45\0\u1d80\0\u1dbb\0\u1df6"+
    "\0\261\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\261\0\u1f58"+
    "\0\261\0\u1f93\0\261\0\u1fce\0\261\0\261\0\261\0\261"+
    "\0\261\0\u2009\0\u2044\0\261\0\u207f\0\u20ba\0\u20f5\0\261"+
    "\0\u2130\0\u216b\0\261\0\261\0\261\0\261\0\u21a6\0\u21e1"+
    "\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9"+
    "\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\73";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\2\1\12\1\2\1\13\1\14\1\15\1\16"+
    "\1\17\1\4\1\20\1\21\1\22\1\4\1\23\1\24"+
    "\1\4\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\6\4\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\2\1\4\1\54\2\4\74\0\1\3\64\0"+
    "\1\55\1\0\1\3\3\0\2\4\15\0\30\4\17\0"+
    "\4\4\3\0\1\5\74\0\1\56\1\57\41\0\1\60"+
    "\72\0\1\61\36\0\1\62\73\0\1\63\32\0\1\64"+
    "\22\0\4\16\1\0\66\16\1\0\2\4\15\0\1\4"+
    "\1\65\1\4\1\66\24\4\17\0\4\4\1\0\2\4"+
    "\15\0\25\4\1\67\2\4\17\0\4\4\1\0\2\4"+
    "\15\0\4\4\1\70\1\71\22\4\17\0\4\4\1\0"+
    "\2\4\15\0\5\4\1\72\22\4\17\0\4\4\1\0"+
    "\2\4\15\0\14\4\1\73\13\4\17\0\4\4\1\0"+
    "\2\4\15\0\5\4\1\74\1\75\1\4\1\76\17\4"+
    "\17\0\4\4\1\0\2\4\15\0\13\4\1\77\14\4"+
    "\17\0\4\4\1\0\2\4\15\0\10\4\1\100\17\4"+
    "\17\0\4\4\1\0\2\4\15\0\1\4\1\101\2\4"+
    "\1\102\16\4\1\103\4\4\17\0\4\4\1\0\2\4"+
    "\15\0\1\4\1\104\26\4\17\0\4\4\1\0\2\4"+
    "\15\0\5\4\1\105\5\4\1\106\14\4\17\0\4\4"+
    "\1\0\2\4\15\0\11\4\1\107\16\4\17\0\4\4"+
    "\1\0\2\4\15\0\1\110\1\4\1\111\5\4\1\112"+
    "\1\4\1\113\15\4\17\0\4\4\1\0\2\4\15\0"+
    "\5\4\1\114\22\4\17\0\4\4\1\0\2\4\15\0"+
    "\5\4\1\115\22\4\17\0\4\4\50\0\1\116\72\0"+
    "\1\117\72\0\1\120\1\0\1\121\70\0\1\122\6\0"+
    "\1\123\63\0\1\124\7\0\1\125\73\0\1\126\61\0"+
    "\1\127\22\0\6\130\1\131\55\130\1\132\6\130\6\133"+
    "\1\134\56\133\1\0\5\133\1\0\1\3\41\0\1\135"+
    "\22\0\1\55\1\0\1\3\1\135\2\0\1\136\66\0"+
    "\1\136\2\0\4\56\1\0\66\56\7\0\1\137\64\0"+
    "\2\4\15\0\2\4\1\140\25\4\17\0\4\4\1\0"+
    "\2\4\15\0\26\4\1\141\1\4\17\0\4\4\1\0"+
    "\2\4\15\0\5\4\1\142\22\4\17\0\4\4\1\0"+
    "\2\4\15\0\11\4\1\143\16\4\17\0\4\4\1\0"+
    "\2\4\15\0\1\4\1\144\26\4\17\0\4\4\1\0"+
    "\2\4\15\0\2\4\1\145\25\4\17\0\4\4\1\0"+
    "\2\4\15\0\1\4\1\146\26\4\17\0\4\4\1\0"+
    "\2\4\15\0\17\4\1\147\10\4\17\0\4\4\1\0"+
    "\2\4\15\0\6\4\1\150\21\4\17\0\4\4\1\0"+
    "\2\4\15\0\2\4\1\151\15\4\1\152\7\4\17\0"+
    "\4\4\1\0\2\4\15\0\1\153\27\4\17\0\4\4"+
    "\1\0\2\4\15\0\14\4\1\154\13\4\17\0\4\4"+
    "\1\0\2\4\15\0\17\4\1\155\10\4\17\0\4\4"+
    "\1\0\2\4\15\0\2\4\1\156\25\4\17\0\4\4"+
    "\1\0\2\4\15\0\1\157\16\4\1\160\10\4\17\0"+
    "\4\4\1\0\2\4\15\0\14\4\1\161\13\4\17\0"+
    "\4\4\1\0\2\4\15\0\3\4\1\162\24\4\17\0"+
    "\4\4\1\0\2\4\15\0\13\4\1\163\14\4\17\0"+
    "\4\4\1\0\2\4\15\0\20\4\1\164\3\4\1\165"+
    "\3\4\17\0\4\4\1\0\2\4\15\0\6\4\1\166"+
    "\2\4\1\167\16\4\17\0\4\4\1\0\2\4\15\0"+
    "\5\4\1\170\22\4\17\0\4\4\1\0\2\4\15\0"+
    "\1\171\27\4\17\0\4\4\1\0\2\4\15\0\2\4"+
    "\1\172\25\4\17\0\4\4\1\0\2\4\15\0\1\173"+
    "\3\4\1\174\23\4\17\0\4\4\4\130\1\0\66\130"+
    "\65\0\1\175\5\0\4\133\1\0\66\133\1\0\1\176"+
    "\21\0\1\176\2\0\2\176\3\0\1\176\1\0\2\176"+
    "\30\0\2\176\1\0\1\176\1\0\1\136\31\0\1\177"+
    "\33\0\1\177\1\136\12\0\1\200\63\0\2\4\15\0"+
    "\13\4\1\201\14\4\17\0\4\4\1\0\2\4\15\0"+
    "\6\4\1\202\21\4\17\0\4\4\1\0\2\4\15\0"+
    "\20\4\1\203\7\4\17\0\4\4\1\0\2\4\15\0"+
    "\5\4\1\204\22\4\17\0\4\4\1\0\2\4\15\0"+
    "\2\4\1\205\14\4\1\206\10\4\17\0\4\4\1\0"+
    "\2\4\15\0\13\4\1\207\14\4\17\0\4\4\1\0"+
    "\2\4\15\0\11\4\1\210\16\4\17\0\4\4\1\0"+
    "\2\4\15\0\14\4\1\211\13\4\17\0\4\4\1\0"+
    "\2\4\15\0\1\212\27\4\17\0\4\4\1\0\2\4"+
    "\15\0\4\4\1\213\23\4\17\0\4\4\1\0\2\4"+
    "\15\0\22\4\1\214\5\4\17\0\4\4\1\0\2\4"+
    "\15\0\13\4\1\215\14\4\17\0\4\4\1\0\2\4"+
    "\15\0\13\4\1\216\14\4\17\0\4\4\1\0\2\4"+
    "\15\0\5\4\1\217\22\4\17\0\4\4\1\0\2\4"+
    "\15\0\1\220\27\4\17\0\4\4\1\0\2\4\15\0"+
    "\16\4\1\221\11\4\17\0\4\4\1\0\2\4\15\0"+
    "\6\4\1\222\21\4\17\0\4\4\1\0\2\4\15\0"+
    "\6\4\1\223\21\4\17\0\4\4\1\0\2\4\15\0"+
    "\1\4\1\224\26\4\17\0\4\4\1\0\2\4\15\0"+
    "\13\4\1\225\14\4\17\0\4\4\1\0\2\4\15\0"+
    "\2\4\1\226\25\4\17\0\4\4\1\0\2\4\15\0"+
    "\14\4\1\227\13\4\17\0\4\4\1\0\2\4\15\0"+
    "\11\4\1\230\16\4\17\0\4\4\1\0\2\4\15\0"+
    "\2\4\1\231\25\4\17\0\4\4\1\0\2\4\15\0"+
    "\5\4\1\232\22\4\17\0\4\4\1\0\2\4\15\0"+
    "\15\4\1\233\12\4\17\0\4\4\1\0\2\4\15\0"+
    "\6\4\1\234\21\4\17\0\4\4\1\0\1\235\13\0"+
    "\1\236\34\0\1\236\15\0\1\235\13\0\1\237\62\0"+
    "\2\4\15\0\15\4\1\240\12\4\17\0\4\4\1\0"+
    "\2\4\15\0\2\4\1\241\25\4\17\0\4\4\1\0"+
    "\2\4\15\0\1\242\27\4\17\0\4\4\1\0\2\4"+
    "\15\0\2\4\1\243\25\4\17\0\4\4\1\0\2\4"+
    "\15\0\11\4\1\244\16\4\17\0\4\4\1\0\2\4"+
    "\15\0\17\4\1\245\10\4\17\0\4\4\1\0\2\4"+
    "\15\0\13\4\1\246\14\4\17\0\4\4\1\0\2\4"+
    "\15\0\11\4\1\247\16\4\17\0\4\4\1\0\2\4"+
    "\15\0\1\4\1\250\26\4\17\0\4\4\1\0\2\4"+
    "\15\0\20\4\1\251\7\4\17\0\4\4\1\0\2\4"+
    "\15\0\4\4\1\252\23\4\17\0\4\4\1\0\2\4"+
    "\15\0\14\4\1\253\13\4\17\0\4\4\1\0\2\4"+
    "\15\0\21\4\1\254\6\4\17\0\4\4\1\0\2\4"+
    "\15\0\13\4\1\255\14\4\17\0\4\4\1\0\2\4"+
    "\15\0\5\4\1\256\22\4\17\0\4\4\1\0\2\4"+
    "\15\0\1\257\27\4\17\0\4\4\1\0\2\4\15\0"+
    "\7\4\1\260\20\4\17\0\4\4\1\0\2\4\15\0"+
    "\2\4\1\261\25\4\17\0\4\4\1\0\2\4\15\0"+
    "\7\4\1\262\20\4\17\0\4\4\1\0\2\4\15\0"+
    "\2\4\1\263\25\4\17\0\4\4\1\0\1\235\66\0"+
    "\1\235\14\0\1\264\61\0\2\4\15\0\13\4\1\265"+
    "\14\4\17\0\4\4\1\0\2\4\15\0\1\4\1\266"+
    "\26\4\17\0\4\4\1\0\2\4\15\0\1\4\1\267"+
    "\26\4\17\0\4\4\1\0\2\4\15\0\2\4\1\270"+
    "\25\4\17\0\4\4\1\0\2\4\15\0\1\4\1\271"+
    "\26\4\17\0\4\4\1\0\2\4\15\0\1\4\1\272"+
    "\26\4\17\0\4\4\1\0\2\4\15\0\13\4\1\273"+
    "\14\4\17\0\4\4\1\0\2\4\15\0\4\4\1\274"+
    "\23\4\17\0\4\4\1\0\2\4\15\0\15\4\1\275"+
    "\12\4\17\0\4\4\1\0\2\4\15\0\3\4\1\276"+
    "\24\4\17\0\4\4\1\0\2\4\15\0\7\4\1\277"+
    "\20\4\17\0\4\4\1\0\2\4\15\0\2\4\1\300"+
    "\25\4\17\0\4\4\1\0\2\4\15\0\10\4\1\301"+
    "\17\4\17\0\4\4\1\0\2\4\15\0\1\302\27\4"+
    "\17\0\4\4\7\0\1\303\64\0\2\4\15\0\3\4"+
    "\1\304\24\4\17\0\4\4\1\0\2\4\15\0\14\4"+
    "\1\305\13\4\17\0\4\4\1\0\2\4\15\0\13\4"+
    "\1\306\14\4\17\0\4\4\1\0\2\4\15\0\13\4"+
    "\1\307\14\4\17\0\4\4\1\0\2\4\15\0\2\4"+
    "\1\310\25\4\17\0\4\4\1\0\2\4\15\0\4\4"+
    "\1\311\23\4\17\0\4\4\13\0\1\312\60\0\2\4"+
    "\15\0\13\4\1\313\14\4\17\0\4\4\1\0\2\4"+
    "\15\0\11\4\1\314\16\4\17\0\4\4\1\0\2\4"+
    "\15\0\15\4\1\315\12\4\17\0\4\4\1\0\2\4"+
    "\15\0\13\4\1\316\14\4\17\0\4\4\14\0\1\317"+
    "\66\0\1\320\70\0\1\321\73\0\1\322\100\0\1\323"+
    "\66\0\1\324\73\0\1\325\67\0\1\326\70\0\1\327"+
    "\100\0\1\330\75\0\1\331\72\0\1\332\63\0\1\333"+
    "\71\0\1\334\73\0\1\335\100\0\1\336\62\0\1\337"+
    "\65\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9558];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\2\1\2\11\2\1\1\11"+
    "\23\1\4\11\4\1\1\11\3\1\1\0\1\1\1\0"+
    "\5\11\31\1\12\11\2\0\1\11\3\0\37\1\1\11"+
    "\1\1\2\0\35\1\2\0\24\1\1\0\16\1\1\0"+
    "\6\1\1\0\4\1\20\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DemoLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public DemoLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 73: 
          { return new Token(TokenConstant.TYPEDEF, yytext());
          }
        case 80: break;
        case 69: 
          { return new Token(TokenConstant.SIZEOF, yytext());
          }
        case 81: break;
        case 1: 
          { System.out.println("Regla activada: Error, carácter no reconocido: " + yytext());
    return new Token(TokenConstant.ERROR, yytext());
          }
        case 82: break;
        case 43: 
          { return new Token(TokenConstant.ASIGNACION_MODULO, yytext());
          }
        case 83: break;
        case 9: 
          { return new Token(TokenConstant.XOR_BINARIO, yytext());
          }
        case 84: break;
        case 3: 
          { return new Token(TokenConstant.ID, yytext());
          }
        case 85: break;
        case 36: 
          { return new Token(TokenConstant.ASIGNACION_SUSTRACTIVA, yytext());
          }
        case 86: break;
        case 46: 
          { return new Token(TokenConstant.INT, yytext());
          }
        case 87: break;
        case 41: 
          { return new Token(TokenConstant.DESPLAZAMIENTO_IZQ, yytext());
          }
        case 88: break;
        case 42: 
          { return new Token(TokenConstant.AND_LOGICO, yytext());
          }
        case 89: break;
        case 61: 
          { return new Token(TokenConstant.WHILE, yytext());
          }
        case 90: break;
        case 15: 
          { return new Token(TokenConstant.NOT_LOGICO, yytext());
          }
        case 91: break;
        case 45: 
          { System.err.println("Error: Comentario sin terminar.");
          }
        case 92: break;
        case 63: 
          { return new Token(TokenConstant.BREAK, yytext());
          }
        case 93: break;
        case 34: 
          { return new Token(TokenConstant.IGUALDAD, yytext());
          }
        case 94: break;
        case 18: 
          { return new Token(TokenConstant.LLAVE_DER, yytext());
          }
        case 95: break;
        case 35: 
          { return new Token(TokenConstant.NO_IGUAL, yytext());
          }
        case 96: break;
        case 79: 
          { return new Token(TokenConstant.COMENTARIO_BLOQUE, yytext());
          }
        case 97: break;
        case 19: 
          { return new Token(TokenConstant.PUNTO_Y_COMA, yytext());
          }
        case 98: break;
        case 44: 
          { return new Token(TokenConstant.STRING, yytext());
          }
        case 99: break;
        case 72: 
          { return new Token(TokenConstant.SWITCH, yytext());
          }
        case 100: break;
        case 67: 
          { return new Token(TokenConstant.DOUBLE, yytext());
          }
        case 101: break;
        case 52: 
          { return new Token(TokenConstant.CASE, yytext());
          }
        case 102: break;
        case 24: 
          { return new Token(TokenConstant.MODULO, yytext());
          }
        case 103: break;
        case 59: 
          { return new Token(TokenConstant.FLOAT, yytext());
          }
        case 104: break;
        case 76: 
          { return new Token(TokenConstant.REGISTER, yytext());
          }
        case 105: break;
        case 78: 
          { return new Token(TokenConstant.VOLATILE, yytext());
          }
        case 106: break;
        case 8: 
          { return new Token(TokenConstant.PARENTESIS_IZQ, yytext());
          }
        case 107: break;
        case 66: 
          { return new Token(TokenConstant.EXTERN, yytext());
          }
        case 108: break;
        case 65: 
          { return new Token(TokenConstant.RETURN, yytext());
          }
        case 109: break;
        case 13: 
          { /* Ignorar directiva de preprocesador */
          }
        case 110: break;
        case 14: 
          { return new Token(TokenConstant.ASIGNACION, yytext());
          }
        case 111: break;
        case 16: 
          { return new Token(TokenConstant.SUSTRACTIVO, yytext());
          }
        case 112: break;
        case 33: 
          { return new Token(TokenConstant.DO, yytext());
          }
        case 113: break;
        case 2: 
          { return new Token(TokenConstant.NUM, yytext());
          }
        case 114: break;
        case 53: 
          { return new Token(TokenConstant.CHAR, yytext());
          }
        case 115: break;
        case 26: 
          { return new Token(TokenConstant.COMENTARIO_LINEA, yytext());
          }
        case 116: break;
        case 74: 
          { return new Token(TokenConstant.DEFAULT, yytext());
          }
        case 117: break;
        case 28: 
          { return new Token(TokenConstant.ASIGNACION_MULTIPLICATIVA, yytext());
          }
        case 118: break;
        case 11: 
          { return new Token(TokenConstant.ADITIVO, yytext());
          }
        case 119: break;
        case 49: 
          { return new Token(TokenConstant.NUM_HEX, yytext());
          }
        case 120: break;
        case 47: 
          { return new Token(TokenConstant.FOR, yytext());
          }
        case 121: break;
        case 54: 
          { return new Token(TokenConstant.ENUM, yytext());
          }
        case 122: break;
        case 17: 
          { return new Token(TokenConstant.LLAVE_IZQ, yytext());
          }
        case 123: break;
        case 39: 
          { return new Token(TokenConstant.DESPLAZAMIENTO_DER, yytext());
          }
        case 124: break;
        case 75: 
          { return new Token(TokenConstant.CONTINUE, yytext());
          }
        case 125: break;
        case 55: 
          { return new Token(TokenConstant.ELSE, yytext());
          }
        case 126: break;
        case 30: 
          { return new Token(TokenConstant.INCREMENTO, yytext());
          }
        case 127: break;
        case 22: 
          { return new Token(TokenConstant.MENOR, yytext());
          }
        case 128: break;
        case 60: 
          { return new Token(TokenConstant.CONST, yytext());
          }
        case 129: break;
        case 6: 
          { return new Token(TokenConstant.DIVISION, yytext());
          }
        case 130: break;
        case 62: 
          { return new Token(TokenConstant.UNION, yytext());
          }
        case 131: break;
        case 58: 
          { return new Token(TokenConstant.NUM_CIENTIFICO, yytext());
          }
        case 132: break;
        case 71: 
          { return new Token(TokenConstant.STRUCT, yytext());
          }
        case 133: break;
        case 25: 
          { return new Token(TokenConstant.COMPLEMENTO_BINARIO, yytext());
          }
        case 134: break;
        case 50: 
          { return new Token(TokenConstant.LONG, yytext());
          }
        case 135: break;
        case 57: 
          { return new Token(TokenConstant.VOID, yytext());
          }
        case 136: break;
        case 68: 
          { return new Token(TokenConstant.SIGNED, yytext());
          }
        case 137: break;
        case 40: 
          { return new Token(TokenConstant.MENOR_IGUAL, yytext());
          }
        case 138: break;
        case 5: 
          { return new Token(TokenConstant.NEWLINE, yytext());
          }
        case 139: break;
        case 56: 
          { return new Token(TokenConstant.GOTO, yytext());
          }
        case 140: break;
        case 48: 
          { return new Token(TokenConstant.CHAR_LITERAL, yytext());
          }
        case 141: break;
        case 10: 
          { return new Token(TokenConstant.OR_BINARIO, yytext());
          }
        case 142: break;
        case 4: 
          { /* Ignorar espacios en blanco */
          }
        case 143: break;
        case 21: 
          { return new Token(TokenConstant.MAYOR, yytext());
          }
        case 144: break;
        case 32: 
          { return new Token(TokenConstant.IF, yytext());
          }
        case 145: break;
        case 23: 
          { return new Token(TokenConstant.AND_BINARIO, yytext());
          }
        case 146: break;
        case 31: 
          { return new Token(TokenConstant.ASIGNACION_ADITIVA, yytext());
          }
        case 147: break;
        case 51: 
          { return new Token(TokenConstant.AUTO, yytext());
          }
        case 148: break;
        case 37: 
          { return new Token(TokenConstant.DECREMENTO, yytext());
          }
        case 149: break;
        case 77: 
          { return new Token(TokenConstant.UNSIGNED, yytext());
          }
        case 150: break;
        case 20: 
          { return new Token(TokenConstant.COMA, yytext());
          }
        case 151: break;
        case 64: 
          { return new Token(TokenConstant.SHORT, yytext());
          }
        case 152: break;
        case 7: 
          { return new Token(TokenConstant.MULTIPLICACION, yytext());
          }
        case 153: break;
        case 70: 
          { return new Token(TokenConstant.STATIC, yytext());
          }
        case 154: break;
        case 12: 
          { return new Token(TokenConstant.PARENTESIS_DER, yytext());
          }
        case 155: break;
        case 38: 
          { return new Token(TokenConstant.MAYOR_IGUAL, yytext());
          }
        case 156: break;
        case 29: 
          { return new Token(TokenConstant.OR_LOGICO, yytext());
          }
        case 157: break;
        case 27: 
          { return new Token(TokenConstant.ASIGNACION_DIVISIVA, yytext());
          }
        case 158: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return new Token(TokenConstant.EOF, null);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
