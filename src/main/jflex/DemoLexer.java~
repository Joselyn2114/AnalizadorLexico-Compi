// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: simple.flex

package com.compi;


@SuppressWarnings("fallthrough")
public class DemoLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\3\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\11\22\1\0\1\23"+
    "\1\24\1\25\1\26\2\0\4\27\1\30\25\27\1\0"+
    "\1\31\2\0\1\27\1\0\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\27\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\27\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\3\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\2\14\1\15\1\16"+
    "\1\17\1\20\20\21\1\22\1\1\1\23\1\0\1\24"+
    "\1\0\1\25\3\0\1\26\2\0\1\27\1\30\1\31"+
    "\6\21\1\32\6\21\1\33\13\21\1\34\1\35\1\0"+
    "\1\36\1\37\13\21\1\40\1\21\1\41\17\21\1\42"+
    "\1\0\1\43\1\21\1\44\1\45\4\21\1\46\1\47"+
    "\2\21\1\50\1\51\13\21\1\52\2\21\1\0\1\36"+
    "\1\53\1\54\4\21\1\55\2\21\1\56\6\21\1\57"+
    "\2\21\1\60\2\21\1\61\1\62\1\21\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\4\21\1\71\1\21\1\72"+
    "\2\21\1\73\1\74\1\75\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\65\0\65\0\237\0\324\0\u0109"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\u013e\0\u0173"+
    "\0\u01a8\0\65\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\65\0\u05cc\0\65"+
    "\0\237\0\65\0\u0601\0\65\0\u0636\0\u066b\0\u06a0\0\u06d5"+
    "\0\u070a\0\u073f\0\65\0\65\0\65\0\u0774\0\u07a9\0\u07de"+
    "\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986"+
    "\0\u09bb\0\u09f0\0\u027c\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9"+
    "\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\65\0\65"+
    "\0\u0c6c\0\u0ca1\0\u073f\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa"+
    "\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u027c\0\u0f1d"+
    "\0\u027c\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090"+
    "\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238"+
    "\0\65\0\u126d\0\u027c\0\u12a2\0\u027c\0\u027c\0\u12d7\0\u130c"+
    "\0\u1341\0\u1376\0\u027c\0\u027c\0\u13ab\0\u13e0\0\u027c\0\u027c"+
    "\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588"+
    "\0\u15bd\0\u15f2\0\u1627\0\u027c\0\u165c\0\u1691\0\u16c6\0\u16c6"+
    "\0\u027c\0\u027c\0\u16fb\0\u1730\0\u1765\0\u179a\0\u027c\0\u17cf"+
    "\0\u1804\0\u027c\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942"+
    "\0\u027c\0\u1977\0\u19ac\0\u027c\0\u19e1\0\u1a16\0\u027c\0\u027c"+
    "\0\u1a4b\0\u027c\0\u027c\0\u027c\0\u027c\0\u027c\0\u027c\0\u1a80"+
    "\0\u1ab5\0\u1aea\0\u1b1f\0\u027c\0\u1b54\0\u027c\0\u1b89\0\u1bbe"+
    "\0\u027c\0\u027c\0\u027c\0\u027c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\2"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\26"+
    "\1\2\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\26\1\36\1\26\1\37\4\26\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\3\26\1\46\1\47\1\50\66\0"+
    "\1\3\2\0\1\3\60\0\6\51\1\52\22\51\1\53"+
    "\14\51\1\0\2\51\1\0\13\51\7\0\1\54\55\0"+
    "\10\55\1\0\20\55\1\56\14\55\1\0\2\55\1\0"+
    "\13\55\13\0\1\57\4\0\1\60\63\0\1\61\1\0"+
    "\2\21\34\0\1\62\24\0\1\61\1\0\2\21\67\0"+
    "\1\63\64\0\1\64\64\0\1\65\60\0\2\26\4\0"+
    "\2\26\1\0\30\26\24\0\2\26\4\0\2\26\1\0"+
    "\22\26\1\66\5\26\24\0\2\26\4\0\2\26\1\0"+
    "\17\26\1\67\10\26\24\0\2\26\4\0\2\26\1\0"+
    "\1\70\6\26\1\71\5\26\1\72\12\26\24\0\2\26"+
    "\4\0\2\26\1\0\4\26\1\73\10\26\1\74\12\26"+
    "\24\0\2\26\4\0\2\26\1\0\12\26\1\75\1\26"+
    "\1\76\10\26\1\77\2\26\24\0\2\26\4\0\2\26"+
    "\1\0\12\26\1\100\2\26\1\101\12\26\24\0\2\26"+
    "\4\0\2\26\1\0\15\26\1\102\12\26\24\0\2\26"+
    "\4\0\2\26\1\0\5\26\1\103\6\26\1\104\13\26"+
    "\24\0\2\26\4\0\2\26\1\0\15\26\1\105\12\26"+
    "\24\0\2\26\4\0\2\26\1\0\4\26\1\106\23\26"+
    "\24\0\2\26\4\0\2\26\1\0\7\26\1\107\1\110"+
    "\10\26\1\111\2\26\1\112\3\26\24\0\2\26\4\0"+
    "\2\26\1\0\26\26\1\113\1\26\24\0\2\26\4\0"+
    "\2\26\1\0\14\26\1\114\13\26\24\0\2\26\4\0"+
    "\2\26\1\0\15\26\1\115\12\26\24\0\2\26\4\0"+
    "\2\26\1\0\7\26\1\116\20\26\66\0\1\117\1\0"+
    "\2\51\3\0\60\51\10\0\1\120\54\0\2\55\3\0"+
    "\60\55\13\57\1\121\51\57\2\60\3\0\60\60\21\0"+
    "\2\122\63\0\2\123\63\0\2\26\4\0\2\26\1\0"+
    "\21\26\1\124\6\26\24\0\2\26\4\0\2\26\1\0"+
    "\4\26\1\125\23\26\24\0\2\26\4\0\2\26\1\0"+
    "\20\26\1\126\7\26\24\0\2\26\4\0\2\26\1\0"+
    "\1\127\27\26\24\0\2\26\4\0\2\26\1\0\14\26"+
    "\1\130\13\26\24\0\2\26\4\0\2\26\1\0\5\26"+
    "\1\131\22\26\24\0\2\26\4\0\2\26\1\0\22\26"+
    "\1\132\5\26\24\0\2\26\4\0\2\26\1\0\20\26"+
    "\1\133\7\26\24\0\2\26\4\0\2\26\1\0\22\26"+
    "\1\134\5\26\24\0\2\26\4\0\2\26\1\0\21\26"+
    "\1\135\6\26\24\0\2\26\4\0\2\26\1\0\15\26"+
    "\1\136\12\26\24\0\2\26\4\0\2\26\1\0\17\26"+
    "\1\137\10\26\24\0\2\26\4\0\2\26\1\0\21\26"+
    "\1\140\6\26\24\0\2\26\4\0\2\26\1\0\21\26"+
    "\1\141\6\26\24\0\2\26\4\0\2\26\1\0\14\26"+
    "\1\142\13\26\24\0\2\26\4\0\2\26\1\0\6\26"+
    "\1\143\12\26\1\144\6\26\24\0\2\26\4\0\2\26"+
    "\1\0\15\26\1\145\12\26\24\0\2\26\4\0\2\26"+
    "\1\0\6\26\1\146\20\26\1\147\24\0\2\26\4\0"+
    "\2\26\1\0\1\150\16\26\1\151\10\26\24\0\2\26"+
    "\4\0\2\26\1\0\10\26\1\152\17\26\24\0\2\26"+
    "\4\0\2\26\1\0\16\26\1\153\11\26\24\0\2\26"+
    "\4\0\2\26\1\0\10\26\1\154\7\26\1\155\7\26"+
    "\24\0\2\26\4\0\2\26\1\0\10\26\1\156\1\26"+
    "\1\157\15\26\24\0\2\26\4\0\2\26\1\0\10\26"+
    "\1\160\17\26\3\0\20\57\1\161\44\57\21\0\2\122"+
    "\5\0\1\162\5\0\1\162\47\0\2\26\4\0\2\26"+
    "\1\0\15\26\1\163\12\26\24\0\2\26\4\0\2\26"+
    "\1\0\1\164\27\26\24\0\2\26\4\0\2\26\1\0"+
    "\4\26\1\165\23\26\24\0\2\26\4\0\2\26\1\0"+
    "\17\26\1\166\10\26\24\0\2\26\4\0\2\26\1\0"+
    "\20\26\1\167\1\170\6\26\24\0\2\26\4\0\2\26"+
    "\1\0\1\171\27\26\24\0\2\26\4\0\2\26\1\0"+
    "\1\26\1\172\26\26\24\0\2\26\4\0\2\26\1\0"+
    "\4\26\1\173\23\26\24\0\2\26\4\0\2\26\1\0"+
    "\13\26\1\174\14\26\24\0\2\26\4\0\2\26\1\0"+
    "\4\26\1\175\23\26\24\0\2\26\4\0\2\26\1\0"+
    "\1\176\27\26\24\0\2\26\4\0\2\26\1\0\15\26"+
    "\1\177\12\26\24\0\2\26\4\0\2\26\1\0\6\26"+
    "\1\200\21\26\24\0\2\26\4\0\2\26\1\0\10\26"+
    "\1\201\17\26\24\0\2\26\4\0\2\26\1\0\22\26"+
    "\1\202\5\26\24\0\2\26\4\0\2\26\1\0\17\26"+
    "\1\203\10\26\24\0\2\26\4\0\2\26\1\0\14\26"+
    "\1\204\13\26\24\0\2\26\4\0\2\26\1\0\4\26"+
    "\1\205\23\26\24\0\2\26\4\0\2\26\1\0\21\26"+
    "\1\206\6\26\24\0\2\26\4\0\2\26\1\0\22\26"+
    "\1\207\5\26\24\0\2\26\4\0\2\26\1\0\21\26"+
    "\1\210\6\26\24\0\2\26\4\0\2\26\1\0\4\26"+
    "\1\211\23\26\24\0\2\26\4\0\2\26\1\0\15\26"+
    "\1\212\12\26\24\0\2\26\4\0\2\26\1\0\10\26"+
    "\1\213\17\26\24\0\2\26\4\0\2\26\1\0\3\26"+
    "\1\214\24\26\24\0\2\26\4\0\2\26\1\0\1\215"+
    "\27\26\24\0\2\26\4\0\2\26\1\0\12\26\1\216"+
    "\15\26\17\0\1\217\1\0\1\217\2\0\2\220\63\0"+
    "\2\26\4\0\2\26\1\0\11\26\1\221\16\26\24\0"+
    "\2\26\4\0\2\26\1\0\21\26\1\222\6\26\24\0"+
    "\2\26\4\0\2\26\1\0\10\26\1\223\17\26\24\0"+
    "\2\26\4\0\2\26\1\0\22\26\1\224\5\26\24\0"+
    "\2\26\4\0\2\26\1\0\12\26\1\225\15\26\24\0"+
    "\2\26\4\0\2\26\1\0\17\26\1\226\10\26\24\0"+
    "\2\26\4\0\2\26\1\0\21\26\1\227\6\26\24\0"+
    "\2\26\4\0\2\26\1\0\20\26\1\230\7\26\24\0"+
    "\2\26\4\0\2\26\1\0\17\26\1\231\10\26\24\0"+
    "\2\26\4\0\2\26\1\0\21\26\1\232\6\26\24\0"+
    "\2\26\4\0\2\26\1\0\4\26\1\233\23\26\24\0"+
    "\2\26\4\0\2\26\1\0\15\26\1\234\12\26\24\0"+
    "\2\26\4\0\2\26\1\0\10\26\1\235\17\26\24\0"+
    "\2\26\4\0\2\26\1\0\2\26\1\236\25\26\24\0"+
    "\2\26\4\0\2\26\1\0\2\26\1\237\25\26\24\0"+
    "\2\26\4\0\2\26\1\0\3\26\1\240\24\26\24\0"+
    "\2\26\4\0\2\26\1\0\14\26\1\241\13\26\24\0"+
    "\2\26\4\0\2\26\1\0\6\26\1\242\21\26\24\0"+
    "\2\26\4\0\2\26\1\0\21\26\1\243\6\26\24\0"+
    "\2\26\4\0\2\26\1\0\4\26\1\244\23\26\24\0"+
    "\2\220\63\0\2\26\4\0\2\26\1\0\14\26\1\245"+
    "\13\26\24\0\2\26\4\0\2\26\1\0\12\26\1\246"+
    "\15\26\24\0\2\26\4\0\2\26\1\0\4\26\1\247"+
    "\23\26\24\0\2\26\4\0\2\26\1\0\14\26\1\250"+
    "\13\26\24\0\2\26\4\0\2\26\1\0\21\26\1\251"+
    "\6\26\24\0\2\26\4\0\2\26\1\0\14\26\1\252"+
    "\13\26\24\0\2\26\4\0\2\26\1\0\3\26\1\253"+
    "\24\26\24\0\2\26\4\0\2\26\1\0\5\26\1\254"+
    "\22\26\24\0\2\26\4\0\2\26\1\0\2\26\1\255"+
    "\25\26\24\0\2\26\4\0\2\26\1\0\21\26\1\256"+
    "\6\26\24\0\2\26\4\0\2\26\1\0\7\26\1\257"+
    "\20\26\24\0\2\26\4\0\2\26\1\0\4\26\1\260"+
    "\23\26\24\0\2\26\4\0\2\26\1\0\14\26\1\261"+
    "\13\26\24\0\2\26\4\0\2\26\1\0\10\26\1\262"+
    "\17\26\24\0\2\26\4\0\2\26\1\0\22\26\1\263"+
    "\5\26\24\0\2\26\4\0\2\26\1\0\21\26\1\264"+
    "\6\26\24\0\2\26\4\0\2\26\1\0\4\26\1\265"+
    "\23\26\24\0\2\26\4\0\2\26\1\0\5\26\1\266"+
    "\22\26\24\0\2\26\4\0\2\26\1\0\4\26\1\267"+
    "\23\26\24\0\2\26\4\0\2\26\1\0\12\26\1\270"+
    "\15\26\24\0\2\26\4\0\2\26\1\0\4\26\1\271"+
    "\23\26\24\0\2\26\4\0\2\26\1\0\17\26\1\272"+
    "\10\26\24\0\2\26\4\0\2\26\1\0\3\26\1\273"+
    "\24\26\24\0\2\26\4\0\2\26\1\0\4\26\1\274"+
    "\23\26\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7155];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\3\1\6\11\3\1\1\11"+
    "\23\1\1\11\1\1\1\11\1\0\1\11\1\0\1\11"+
    "\3\0\1\1\2\0\3\11\31\1\2\11\1\0\37\1"+
    "\1\11\1\0\34\1\1\0\55\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DemoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     return new Token(TokenConstant.EOF, null);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Token(TokenConstant.ERROR, yytext());
            }
          // fall through
          case 63: break;
          case 2:
            { /* Ignorar espacios en blanco */
            }
          // fall through
          case 64: break;
          case 3:
            { return new Token(TokenConstant.NEWLINE, yytext());
            }
          // fall through
          case 65: break;
          case 4:
            { return new Token(TokenConstant.OP_NEGACION, yytext());
            }
          // fall through
          case 66: break;
          case 5:
            { return new Token(TokenConstant.DELIMITADOR_PARENTESIS_IZQ, yytext());
            }
          // fall through
          case 67: break;
          case 6:
            { return new Token(TokenConstant.DELIMITADOR_PARENTESIS_DER, yytext());
            }
          // fall through
          case 68: break;
          case 7:
            { return new Token(TokenConstant.OP_MULTIPLICACION, yytext());
            }
          // fall through
          case 69: break;
          case 8:
            { return new Token(TokenConstant.OP_ADITIVO, yytext());
            }
          // fall through
          case 70: break;
          case 9:
            { return new Token(TokenConstant.DELIMITADOR_COMA, yytext());
            }
          // fall through
          case 71: break;
          case 10:
            { return new Token(TokenConstant.OP_SUSTRACTIVO, yytext());
            }
          // fall through
          case 72: break;
          case 11:
            { return new Token(TokenConstant.OP_DIVISION, yytext());
            }
          // fall through
          case 73: break;
          case 12:
            { return new Token(TokenConstant.LIT_ENTERO, yytext());
            }
          // fall through
          case 74: break;
          case 13:
            { return new Token(TokenConstant.DELIMITADOR_PUNTO_Y_COMA, yytext());
            }
          // fall through
          case 75: break;
          case 14:
            { return new Token(TokenConstant.OP_MENOR, yytext());
            }
          // fall through
          case 76: break;
          case 15:
            { return new Token(TokenConstant.OP_ASIGNACION, yytext());
            }
          // fall through
          case 77: break;
          case 16:
            { return new Token(TokenConstant.OP_MAYOR, yytext());
            }
          // fall through
          case 78: break;
          case 17:
            { return new Token(TokenConstant.IDENTIFICADOR, yytext());
            }
          // fall through
          case 79: break;
          case 18:
            { return new Token(TokenConstant.DELIMITADOR_LLAVE_IZQ, yytext());
            }
          // fall through
          case 80: break;
          case 19:
            { return new Token(TokenConstant.DELIMITADOR_LLAVE_DER, yytext());
            }
          // fall through
          case 81: break;
          case 20:
            { return new Token(TokenConstant.LIT_CADENA, yytext());
            }
          // fall through
          case 82: break;
          case 21:
            { return new Token(TokenConstant.OP_Y_LOGICO, yytext());
            }
          // fall through
          case 83: break;
          case 22:
            { /* Ignorar comentarios de línea */
            }
          // fall through
          case 84: break;
          case 23:
            { return new Token(TokenConstant.OP_MENOR_IGUAL, yytext());
            }
          // fall through
          case 85: break;
          case 24:
            { return new Token(TokenConstant.OP_IGUALDAD, yytext());
            }
          // fall through
          case 86: break;
          case 25:
            { return new Token(TokenConstant.OP_MAYOR_IGUAL, yytext());
            }
          // fall through
          case 87: break;
          case 26:
            { return new Token(TokenConstant.RESERVADA_DO, yytext());
            }
          // fall through
          case 88: break;
          case 27:
            { return new Token(TokenConstant.RESERVADA_IF, yytext());
            }
          // fall through
          case 89: break;
          case 28:
            { return new Token(TokenConstant.OP_O_LOGICO, yytext());
            }
          // fall through
          case 90: break;
          case 29:
            { return new Token(TokenConstant.LIT_CARACTER, yytext());
            }
          // fall through
          case 91: break;
          case 30:
            { return new Token(TokenConstant.LIT_REAL, yytext());
            }
          // fall through
          case 92: break;
          case 31:
            { return new Token(TokenConstant.LIT_HEXADECIMAL, yytext());
            }
          // fall through
          case 93: break;
          case 32:
            { return new Token(TokenConstant.RESERVADA_FOR, yytext());
            }
          // fall through
          case 94: break;
          case 33:
            { return new Token(TokenConstant.RESERVADA_INT, yytext());
            }
          // fall through
          case 95: break;
          case 34:
            { /* Ignorar comentarios de bloque */
            }
          // fall through
          case 96: break;
          case 35:
            { return new Token(TokenConstant.RESERVADA_AUTO, yytext());
            }
          // fall through
          case 97: break;
          case 36:
            { return new Token(TokenConstant.RESERVADA_CASE, yytext());
            }
          // fall through
          case 98: break;
          case 37:
            { return new Token(TokenConstant.RESERVADA_CHAR, yytext());
            }
          // fall through
          case 99: break;
          case 38:
            { return new Token(TokenConstant.RESERVADA_ELSE, yytext());
            }
          // fall through
          case 100: break;
          case 39:
            { return new Token(TokenConstant.RESERVADA_ENUM, yytext());
            }
          // fall through
          case 101: break;
          case 40:
            { return new Token(TokenConstant.RESERVADA_GOTO, yytext());
            }
          // fall through
          case 102: break;
          case 41:
            { return new Token(TokenConstant.RESERVADA_LONG, yytext());
            }
          // fall through
          case 103: break;
          case 42:
            { return new Token(TokenConstant.RESERVADA_VOID, yytext());
            }
          // fall through
          case 104: break;
          case 43:
            { return new Token(TokenConstant.RESERVADA_BREAK, yytext());
            }
          // fall through
          case 105: break;
          case 44:
            { return new Token(TokenConstant.RESERVADA_CONST, yytext());
            }
          // fall through
          case 106: break;
          case 45:
            { return new Token(TokenConstant.RESERVADA_FLOAT, yytext());
            }
          // fall through
          case 107: break;
          case 46:
            { return new Token(TokenConstant.RESERVADA_SHORT, yytext());
            }
          // fall through
          case 108: break;
          case 47:
            { return new Token(TokenConstant.RESERVADA_UNION, yytext());
            }
          // fall through
          case 109: break;
          case 48:
            { return new Token(TokenConstant.RESERVADA_WHILE, yytext());
            }
          // fall through
          case 110: break;
          case 49:
            { return new Token(TokenConstant.RESERVADA_DOUBLE, yytext());
            }
          // fall through
          case 111: break;
          case 50:
            { return new Token(TokenConstant.RESERVADA_EXTERN, yytext());
            }
          // fall through
          case 112: break;
          case 51:
            { return new Token(TokenConstant.RESERVADA_RETURN, yytext());
            }
          // fall through
          case 113: break;
          case 52:
            { return new Token(TokenConstant.RESERVADA_SIGNED, yytext());
            }
          // fall through
          case 114: break;
          case 53:
            { return new Token(TokenConstant.RESERVADA_SIZEOF, yytext());
            }
          // fall through
          case 115: break;
          case 54:
            { return new Token(TokenConstant.RESERVADA_STATIC, yytext());
            }
          // fall through
          case 116: break;
          case 55:
            { return new Token(TokenConstant.RESERVADA_STRUCT, yytext());
            }
          // fall through
          case 117: break;
          case 56:
            { return new Token(TokenConstant.RESERVADA_SWITCH, yytext());
            }
          // fall through
          case 118: break;
          case 57:
            { return new Token(TokenConstant.RESERVADA_DEFAULT, yytext());
            }
          // fall through
          case 119: break;
          case 58:
            { return new Token(TokenConstant.RESERVADA_TYPEDEF, yytext());
            }
          // fall through
          case 120: break;
          case 59:
            { return new Token(TokenConstant.RESERVADA_CONTINUE, yytext());
            }
          // fall through
          case 121: break;
          case 60:
            { return new Token(TokenConstant.RESERVADA_REGISTER, yytext());
            }
          // fall through
          case 122: break;
          case 61:
            { return new Token(TokenConstant.RESERVADA_UNSIGNED, yytext());
            }
          // fall through
          case 123: break;
          case 62:
            { return new Token(TokenConstant.RESERVADA_VOLATILE, yytext());
            }
          // fall through
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
