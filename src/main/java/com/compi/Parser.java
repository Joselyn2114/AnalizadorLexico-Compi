
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compi;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\006\000\002\013\005" +
    "\000\002\013\002\000\002\005\004\000\002\005\002\000" +
    "\002\006\012\000\002\016\003\000\002\016\002\000\002" +
    "\014\005\000\002\014\003\000\002\015\004\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\010\004" +
    "\000\002\010\002\000\002\007\004\000\002\007\010\000" +
    "\002\007\007\000\002\007\011\000\002\007\013\000\002" +
    "\007\012\000\002\007\005\000\002\007\007\000\002\007" +
    "\010\000\002\007\004\000\002\007\004\000\002\017\004" +
    "\000\002\017\002\000\002\020\007\000\002\020\002\000" +
    "\002\021\005\000\002\021\002\000\002\022\003\000\002" +
    "\022\002\000\002\023\005\000\002\023\002\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\003\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\044\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007" +
    "\ufffe\010\ufffe\011\ufffe\015\ufffe\024\ufffe\030\ufffe\032\ufffe" +
    "\033\ufffe\036\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\001" +
    "\002\000\004\002\214\001\002\000\044\002\ufff9\004\012" +
    "\005\017\006\013\007\015\010\023\011\031\015\020\024" +
    "\024\030\006\032\025\033\027\036\011\040\021\041\022" +
    "\042\030\043\016\001\002\000\004\106\uffee\001\002\000" +
    "\044\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff" +
    "\011\uffff\015\uffff\024\uffff\030\uffff\032\uffff\033\uffff\036" +
    "\uffff\040\uffff\041\uffff\042\uffff\043\uffff\001\002\000\004" +
    "\002\001\001\002\000\004\106\uffe7\001\002\000\004\106" +
    "\ufff2\001\002\000\004\106\ufff0\001\002\000\004\106\206" +
    "\001\002\000\004\106\uffeb\001\002\000\004\106\uffe3\001" +
    "\002\000\004\106\ufff1\001\002\000\004\106\uffe4\001\002" +
    "\000\004\106\uffe6\001\002\000\004\106\uffe5\001\002\000" +
    "\004\106\uffea\001\002\000\004\106\uffe8\001\002\000\004" +
    "\106\uffed\001\002\000\044\002\ufff9\004\012\005\017\006" +
    "\013\007\015\010\023\011\031\015\020\024\024\030\006" +
    "\032\025\033\027\036\011\040\021\041\022\042\030\043" +
    "\016\001\002\000\004\106\uffe9\001\002\000\004\106\uffec" +
    "\001\002\000\004\106\uffef\001\002\000\004\002\ufffa\001" +
    "\002\000\004\106\034\001\002\000\004\053\035\001\002" +
    "\000\044\004\012\005\017\006\013\007\015\010\023\011" +
    "\031\015\020\024\024\030\006\032\025\033\027\036\011" +
    "\040\021\041\022\042\030\043\016\054\ufff6\001\002\000" +
    "\004\106\205\001\002\000\004\054\044\001\002\000\006" +
    "\054\ufff4\060\ufff4\001\002\000\006\054\ufff7\060\042\001" +
    "\002\000\042\004\012\005\017\006\013\007\015\010\023" +
    "\011\031\015\020\024\024\030\006\032\025\033\027\036" +
    "\011\040\021\041\022\042\030\043\016\001\002\000\006" +
    "\054\ufff5\060\ufff5\001\002\000\004\055\045\001\002\000" +
    "\034\012\uffe1\013\uffe1\014\uffe1\016\uffe1\020\uffe1\022\uffe1" +
    "\026\uffe1\037\uffe1\056\uffe1\106\uffe1\107\uffe1\117\uffe1\120" +
    "\uffe1\001\002\000\034\012\055\013\051\014\062\016\065" +
    "\020\063\022\064\026\052\037\060\056\053\106\056\107" +
    "\050\117\047\120\057\001\002\000\004\053\201\001\002" +
    "\000\036\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051" +
    "\uffc0\054\uffc0\057\uffc0\060\uffc0\063\uffc0\064\uffc0\065\uffc0" +
    "\066\uffc0\121\uffc0\001\002\000\004\053\175\001\002\000" +
    "\004\053\165\001\002\000\044\002\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\015\ufff8\024\ufff8\030" +
    "\ufff8\032\ufff8\033\ufff8\036\ufff8\040\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\001\002\000\040\012\uffe2\013\uffe2\014\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\026\uffe2\037\uffe2" +
    "\056\uffe2\106\uffe2\107\uffe2\117\uffe2\120\uffe2\001\002\000" +
    "\004\053\156\001\002\000\040\044\uffbf\045\uffbf\046\uffbf" +
    "\047\uffbf\050\uffbf\051\uffbf\052\154\054\uffbf\057\uffbf\060" +
    "\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\121\uffbf\001\002" +
    "\000\004\053\144\001\002\000\004\053\126\001\002\000" +
    "\030\044\074\045\103\046\076\047\073\050\100\051\104" +
    "\057\125\063\077\064\105\065\102\066\075\001\002\000" +
    "\010\057\uffce\106\056\107\050\001\002\000\004\057\121" +
    "\001\002\000\032\012\055\013\051\014\062\016\065\020" +
    "\063\022\064\026\052\037\060\106\056\107\050\117\047" +
    "\120\057\001\002\000\004\057\066\001\002\000\042\012" +
    "\uffd7\013\uffd7\014\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\026\uffd7\037\uffd7\056\uffd7\106\uffd7\107" +
    "\uffd7\117\uffd7\120\uffd7\001\002\000\004\013\070\001\002" +
    "\000\004\053\071\001\002\000\006\106\056\107\050\001" +
    "\002\000\030\044\074\045\103\046\076\047\073\050\100" +
    "\051\104\054\101\063\077\064\105\065\102\066\075\001" +
    "\002\000\006\106\056\107\050\001\002\000\006\106\056" +
    "\107\050\001\002\000\006\106\056\107\050\001\002\000" +
    "\006\106\056\107\050\001\002\000\006\106\056\107\050" +
    "\001\002\000\006\106\056\107\050\001\002\000\004\057" +
    "\112\001\002\000\006\106\056\107\050\001\002\000\006" +
    "\106\056\107\050\001\002\000\006\106\056\107\050\001" +
    "\002\000\006\106\056\107\050\001\002\000\036\044\uffc5" +
    "\045\uffc5\046\076\047\073\050\100\051\104\054\uffc5\057" +
    "\uffc5\060\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\121\uffc5" +
    "\001\002\000\036\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050" +
    "\uffc8\051\uffc8\054\uffc8\057\uffc8\060\uffc8\063\uffc8\064\uffc8" +
    "\065\uffc8\066\uffc8\121\uffc8\001\002\000\036\044\uffc2\045" +
    "\uffc2\046\076\047\073\050\100\051\104\054\uffc2\057\uffc2" +
    "\060\uffc2\063\077\064\105\065\102\066\075\121\uffc2\001" +
    "\002\000\036\044\uffc6\045\uffc6\046\076\047\073\050\100" +
    "\051\104\054\uffc6\057\uffc6\060\uffc6\063\uffc6\064\uffc6\065" +
    "\uffc6\066\uffc6\121\uffc6\001\002\000\042\012\uffdd\013\uffdd" +
    "\014\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\026\uffdd\037\uffdd\056\uffdd\106\uffdd\107\uffdd\117\uffdd" +
    "\120\uffdd\001\002\000\036\044\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\051\uffc9\054\uffc9\057\uffc9\060\uffc9\063\uffc9" +
    "\064\uffc9\065\uffc9\066\uffc9\121\uffc9\001\002\000\036\044" +
    "\uffc4\045\uffc4\046\076\047\073\050\100\051\104\054\uffc4" +
    "\057\uffc4\060\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\121" +
    "\uffc4\001\002\000\036\044\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\100\051\104\054\uffcb\057\uffcb\060\uffcb\063\uffcb\064" +
    "\uffcb\065\uffcb\066\uffcb\121\uffcb\001\002\000\036\044\uffc7" +
    "\045\uffc7\046\076\047\073\050\100\051\104\054\uffc7\057" +
    "\uffc7\060\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\121\uffc7" +
    "\001\002\000\036\044\uffc3\045\uffc3\046\076\047\073\050" +
    "\100\051\104\054\uffc3\057\uffc3\060\uffc3\063\077\064\105" +
    "\065\102\066\075\121\uffc3\001\002\000\036\044\uffca\045" +
    "\uffca\046\uffca\047\uffca\050\100\051\104\054\uffca\057\uffca" +
    "\060\uffca\063\uffca\064\uffca\065\uffca\066\uffca\121\uffca\001" +
    "\002\000\042\012\uffd6\013\uffd6\014\uffd6\016\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\023\uffd6\026\uffd6\037\uffd6\056" +
    "\uffd6\106\uffd6\107\uffd6\117\uffd6\120\uffd6\001\002\000\030" +
    "\044\074\045\103\046\076\047\073\050\100\051\104\057" +
    "\uffcf\063\077\064\105\065\102\066\075\001\002\000\004" +
    "\057\124\001\002\000\042\012\uffda\013\uffda\014\uffda\016" +
    "\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\026\uffda" +
    "\037\uffda\056\uffda\106\uffda\107\uffda\117\uffda\120\uffda\001" +
    "\002\000\042\012\uffe0\013\uffe0\014\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\023\uffe0\026\uffe0\037\uffe0\056" +
    "\uffe0\106\uffe0\107\uffe0\117\uffe0\120\uffe0\001\002\000\006" +
    "\106\056\107\050\001\002\000\030\044\074\045\103\046" +
    "\076\047\073\050\100\051\104\054\130\063\077\064\105" +
    "\065\102\066\075\001\002\000\004\055\131\001\002\000" +
    "\010\017\uffd2\021\uffd2\056\uffd2\001\002\000\010\017\135" +
    "\021\133\056\uffd0\001\002\000\004\121\142\001\002\000" +
    "\004\056\141\001\002\000\006\106\056\107\050\001\002" +
    "\000\030\044\074\045\103\046\076\047\073\050\100\051" +
    "\104\063\077\064\105\065\102\066\075\121\137\001\002" +
    "\000\040\012\uffe1\013\uffe1\014\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\026\uffe1\037\uffe1\056\uffe1\106\uffe1" +
    "\107\uffe1\117\uffe1\120\uffe1\001\002\000\040\012\055\013" +
    "\051\014\062\016\065\017\uffd3\020\063\021\uffd3\022\064" +
    "\026\052\037\060\056\uffd3\106\056\107\050\117\047\120" +
    "\057\001\002\000\042\012\uffdb\013\uffdb\014\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\026\uffdb\037" +
    "\uffdb\056\uffdb\106\uffdb\107\uffdb\117\uffdb\120\uffdb\001\002" +
    "\000\034\012\uffe1\013\uffe1\014\uffe1\016\uffe1\020\uffe1\022" +
    "\uffe1\026\uffe1\037\uffe1\056\uffe1\106\uffe1\107\uffe1\117\uffe1" +
    "\120\uffe1\001\002\000\034\012\055\013\051\014\062\016" +
    "\065\020\063\022\064\026\052\037\060\056\uffd1\106\056" +
    "\107\050\117\047\120\057\001\002\000\006\106\056\107" +
    "\050\001\002\000\032\044\074\045\103\046\076\047\073" +
    "\050\100\051\104\054\uffcc\060\146\063\077\064\105\065" +
    "\102\066\075\001\002\000\006\106\056\107\050\001\002" +
    "\000\004\054\150\001\002\000\004\057\151\001\002\000" +
    "\042\012\uffd8\013\uffd8\014\uffd8\016\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\022\uffd8\023\uffd8\026\uffd8\037\uffd8\056\uffd8\106" +
    "\uffd8\107\uffd8\117\uffd8\120\uffd8\001\002\000\032\044\074" +
    "\045\103\046\076\047\073\050\100\051\104\054\uffcc\060" +
    "\146\063\077\064\105\065\102\066\075\001\002\000\004" +
    "\054\uffcd\001\002\000\006\106\056\107\050\001\002\000" +
    "\036\044\uffc1\045\uffc1\046\076\047\073\050\100\051\104" +
    "\054\uffc1\057\uffc1\060\uffc1\063\uffc1\064\uffc1\065\uffc1\066" +
    "\uffc1\121\uffc1\001\002\000\006\106\056\107\050\001\002" +
    "\000\030\044\074\045\103\046\076\047\073\050\100\051" +
    "\104\054\160\063\077\064\105\065\102\066\075\001\002" +
    "\000\032\012\055\013\051\014\062\016\065\020\063\022" +
    "\064\026\052\037\060\106\056\107\050\117\047\120\057" +
    "\001\002\000\042\012\uffd4\013\uffd4\014\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\023\162\026\uffd4\037\uffd4" +
    "\056\uffd4\106\uffd4\107\uffd4\117\uffd4\120\uffd4\001\002\000" +
    "\032\012\055\013\051\014\062\016\065\020\063\022\064" +
    "\026\052\037\060\106\056\107\050\117\047\120\057\001" +
    "\002\000\042\012\uffdf\013\uffdf\014\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\026\uffdf\037\uffdf\056" +
    "\uffdf\106\uffdf\107\uffdf\117\uffdf\120\uffdf\001\002\000\042" +
    "\012\uffd5\013\uffd5\014\uffd5\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\026\uffd5\037\uffd5\056\uffd5\106\uffd5" +
    "\107\uffd5\117\uffd5\120\uffd5\001\002\000\006\106\056\107" +
    "\050\001\002\000\030\044\074\045\103\046\076\047\073" +
    "\050\100\051\104\057\167\063\077\064\105\065\102\066" +
    "\075\001\002\000\006\106\056\107\050\001\002\000\030" +
    "\044\074\045\103\046\076\047\073\050\100\051\104\057" +
    "\171\063\077\064\105\065\102\066\075\001\002\000\006" +
    "\106\056\107\050\001\002\000\030\044\074\045\103\046" +
    "\076\047\073\050\100\051\104\054\173\063\077\064\105" +
    "\065\102\066\075\001\002\000\032\012\055\013\051\014" +
    "\062\016\065\020\063\022\064\026\052\037\060\106\056" +
    "\107\050\117\047\120\057\001\002\000\042\012\uffdc\013" +
    "\uffdc\014\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\026\uffdc\037\uffdc\056\uffdc\106\uffdc\107\uffdc\117" +
    "\uffdc\120\uffdc\001\002\000\006\106\056\107\050\001\002" +
    "\000\030\044\074\045\103\046\076\047\073\050\100\051" +
    "\104\054\177\063\077\064\105\065\102\066\075\001\002" +
    "\000\032\012\055\013\051\014\062\016\065\020\063\022" +
    "\064\026\052\037\060\106\056\107\050\117\047\120\057" +
    "\001\002\000\042\012\uffde\013\uffde\014\uffde\016\uffde\017" +
    "\uffde\020\uffde\021\uffde\022\uffde\023\uffde\026\uffde\037\uffde" +
    "\056\uffde\106\uffde\107\uffde\117\uffde\120\uffde\001\002\000" +
    "\004\106\202\001\002\000\004\054\203\001\002\000\004" +
    "\057\204\001\002\000\042\012\uffd9\013\uffd9\014\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\026\uffd9" +
    "\037\uffd9\056\uffd9\106\uffd9\107\uffd9\117\uffd9\120\uffd9\001" +
    "\002\000\006\054\ufff3\060\ufff3\001\002\000\010\053\035" +
    "\057\ufffb\060\207\001\002\000\004\106\212\001\002\000" +
    "\004\057\211\001\002\000\044\002\ufffd\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\010\ufffd\011\ufffd\015\ufffd\024\ufffd\030" +
    "\ufffd\032\ufffd\033\ufffd\036\ufffd\040\ufffd\041\ufffd\042\ufffd" +
    "\043\ufffd\001\002\000\006\057\ufffb\060\207\001\002\000" +
    "\004\057\ufffc\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\012\004\006\005\007\006\025\012\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\031\006\025\012\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\035\014\040" +
    "\015\037\016\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\035" +
    "\015\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\045\001\001\000\006\007\053\011\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\121\022\122\001\001" +
    "\000\002\001\001\000\006\007\066\011\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\071\001\001\000\002\001\001\000" +
    "\004\011\117\001\001\000\004\011\116\001\001\000\004" +
    "\011\115\001\001\000\004\011\114\001\001\000\004\011" +
    "\113\001\001\000\004\011\112\001\001\000\002\001\001" +
    "\000\004\011\110\001\001\000\004\011\107\001\001\000" +
    "\004\011\106\001\001\000\004\011\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\131\001\001\000\004\021\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\135\001\001\000\002" +
    "\001\001\000\004\010\137\001\001\000\006\007\053\011" +
    "\060\001\001\000\002\001\001\000\004\010\142\001\001" +
    "\000\006\007\053\011\060\001\001\000\004\011\144\001" +
    "\001\000\004\023\146\001\001\000\004\011\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\152\001\001\000\002\001\001\000\004\011\154" +
    "\001\001\000\002\001\001\000\004\011\156\001\001\000" +
    "\002\001\001\000\006\007\160\011\060\001\001\000\004" +
    "\017\162\001\001\000\006\007\163\011\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\165\001\001" +
    "\000\002\001\001\000\004\011\167\001\001\000\002\001" +
    "\001\000\004\011\171\001\001\000\002\001\001\000\006" +
    "\007\173\011\060\001\001\000\002\001\001\000\004\011" +
    "\175\001\001\000\002\001\001\000\006\007\177\011\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\212\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= global_decl_list func_decl_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // global_decl_list ::= global_decl_list global_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_decl_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // global_decl_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_decl_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // global_decl ::= type ID id_list PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // id_list ::= COMA ID id_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // id_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // func_decl_list ::= func_decl func_decl_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_decl_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // func_decl_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_decl_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_decl ::= type ID PARENTESIS_IZQ param_opt PARENTESIS_DER LLAVE_IZQ stmt_list LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_decl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // param_opt ::= param_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_opt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // param_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_opt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // param_list ::= param_list COMA param 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param_list ::= param 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param ::= type ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= UNSIGNED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= SIGNED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= ENUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= STRUCT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= TYPEDEF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= UNION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= AUTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= VOLATILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt_list ::= stmt_list stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= expr PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= IF PARENTESIS_IZQ expr PARENTESIS_DER stmt else_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= WHILE PARENTESIS_IZQ expr PARENTESIS_DER stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= DO stmt WHILE PARENTESIS_IZQ expr PARENTESIS_DER PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= FOR PARENTESIS_IZQ expr PUNTO_Y_COMA expr PUNTO_Y_COMA expr PARENTESIS_DER stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= SWITCH PARENTESIS_IZQ expr PARENTESIS_DER LLAVE_IZQ case_list default_opt LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= RETURN return_expr PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= READ PARENTESIS_IZQ ID PARENTESIS_DER PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= WRITE PARENTESIS_IZQ expr write_expr_opt PARENTESIS_DER PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= BREAK PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= CONTINUE PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // else_opt ::= ELSE stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_opt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // else_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_opt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // case_list ::= case_list CASE expr COLON stmt_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // case_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // default_opt ::= DEFAULT COLON stmt_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default_opt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // default_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default_opt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // return_expr ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // return_expr ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // write_expr_opt ::= COMA expr write_expr_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_expr_opt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // write_expr_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_expr_opt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr ADITIVO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr SUSTRACTIVO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr MULTIPLICACION expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr DIVISION expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr MENOR expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr MAYOR expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr MENOR_IGUAL expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr MAYOR_IGUAL expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr IGUALDAD expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= expr NO_IGUAL expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= ID ASIGNACION expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
