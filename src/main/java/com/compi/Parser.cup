// Declaración de paquete y imports para los archivos generados
package com.compi;

import java.util.HashMap;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
import TokenTable.TokenInfo;

parser code {:
    public ArrayList<String> syntaxErrors = new ArrayList<>();
    public ArrayList<String> semanticErrors = new ArrayList<>();

    private HashMap<String, String> symbolTable = new HashMap<>();

    private void declareVariable(String id, String type) {
        if (symbolTable.containsKey(id)) {
            semanticErrors.add("Error: Variable '" + id + "' ya ha sido declarada.");
        } else {
            symbolTable.put(id, type);
        }
    }

    private void checkVariable(String id) {
        if (!symbolTable.containsKey(id)) {
            syntaxErrors.add("Error: Variable '" + id + "' no ha sido declarada.");
        }
    }

    public ArrayList<String> getSyntaxErrors() {
        return syntaxErrors;
    }

    public ArrayList<String> getSemanticErrors() {
        return semanticErrors;
    }

    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol sym = (Symbol) info;
            TokenInfo tokenInfo = (TokenInfo) sym.value;
            syntaxErrors.add(String.format("Syntax Error: %s near token '%s' at line %d, column %d",
                    message, tokenInfo.value, tokenInfo.line, tokenInfo.column));
        } else {
            syntaxErrors.add("Syntax Error: " + message);
        }
    }

:};

// Definición de terminales
terminal int ID, NUM, CHAR_LITERAL, STRING;
terminal IGUALDAD, NO_IGUAL, ADITIVO, SUSTRACTIVO, MULTIPLICACION, DIVISION, ASIGNACION;
terminal PARENTESIS_IZQ, PARENTESIS_DER, LLAVE_IZQ, LLAVE_DER, PUNTO_Y_COMA, COMA;
terminal INT, FLOAT, CHAR, VOID, IF, ELSE, WHILE, FOR, RETURN, CONST, END, DO, SWITCH, CASE, DEFAULT, BREAK, CONTINUE;
terminal LONG, SHORT, DOUBLE, SIGNED, UNSIGNED, AUTO, REGISTER, EXTERN, STATIC, VOLATILE, STRUCT, UNION, TYPEDEF, SIZEOF;
terminal NUM_HEX, ENUM, GOTO, NUM_CIENTIFICO;
terminal INCREMENTO, DECREMENTO, COLON, MAYOR_IGUAL, MENOR_IGUAL, MAYOR, MENOR;
terminal AND_BINARIO, OR_BINARIO, XOR_BINARIO, MODULO, DESPLAZAMIENTO_IZQ, DESPLAZAMIENTO_DER;
terminal ASIGNACION_ADITIVA, ASIGNACION_SUSTRACTIVA, ASIGNACION_MULTIPLICATIVA, ASIGNACION_DIVISIVA, ASIGNACION_MODULO;
terminal AND_LOGICO, OR_LOGICO, NOT_LOGICO, COMPLEMENTO_BINARIO, NEWLINE, ERROR;

// Definición de no terminales
non terminal program, declaration_list, declaration, func_decl, var_decl, statement, expr, block, statement_list, tipo;

// Definición de precedencia y asociatividad
precedence left ADITIVO, SUSTRACTIVO;
precedence left MULTIPLICACION, DIVISION;
precedence right IGUALDAD, NO_IGUAL;
precedence right PARENTESIS_IZQ, PARENTESIS_DER;

// Producción de inicio
start with program;

// Estructura principal del programa
program ::= declaration_list END
          | declaration_list error {: report_error("Error: programa incompleto o declaración incorrecta", parser.scan()); :};

// Lista de declaraciones (variables o funciones)
declaration_list ::= declaration_list declaration
                  | /* epsilon */;

// Declaración de variable
declaration ::= var_decl
              | func_decl
              | error PUNTO_Y_COMA {: report_error("Error: declaración inválida", parser.scan()); :};

// Declaración de variable
var_decl ::= tipo ID PUNTO_Y_COMA
           {: declareVariable("id", "tipo"); :}
           | tipo error PUNTO_Y_COMA {: report_error("Error: declaración de variable incompleta", parser.scan()); :};

// Declaración de función
func_decl ::= tipo ID PARENTESIS_IZQ PARENTESIS_DER block
            | tipo ID PARENTESIS_IZQ error PARENTESIS_DER block {: report_error("Error: declaración de función inválida", parser.scan()); :};

// Producción para tipos
tipo ::= INT
       | FLOAT
       | CHAR
       | VOID
       | error {: report_error("Error: tipo inválido", parser.scan()); :};

// Bloque de código de función
block ::= LLAVE_IZQ statement_list LLAVE_DER
        | LLAVE_IZQ statement_list error LLAVE_DER {: report_error("Error: bloque de código inválido", parser.scan()); :};

// Lista de sentencias dentro de un bloque
statement_list ::= statement_list statement
                 | /* epsilon */;

// Definición de las sentencias dentro de un bloque
statement ::= var_decl
            | RETURN expr PUNTO_Y_COMA
            | expr PUNTO_Y_COMA
            | block
            | IF PARENTESIS_IZQ expr PARENTESIS_DER statement
            | IF PARENTESIS_IZQ expr PARENTESIS_DER statement ELSE statement
            | WHILE PARENTESIS_IZQ expr PARENTESIS_DER statement
            | FOR PARENTESIS_IZQ expr PUNTO_Y_COMA expr PUNTO_Y_COMA expr PARENTESIS_DER statement
            | error PUNTO_Y_COMA {: report_error("Error en sentencia: declaración o expresión esperada", parser.scan()); :};

// Expresiones aritméticas y de asignación
expr ::= expr ADITIVO expr
       | expr SUSTRACTIVO expr
       | expr MULTIPLICACION expr
       | expr DIVISION expr
       | ID
       | NUM
       | CHAR_LITERAL
       | STRING
       | PARENTESIS_IZQ expr PARENTESIS_DER;
